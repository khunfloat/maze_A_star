import math
import os
import time

main_map = [
    [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
    [1,2,0,0,0,0,0,0,1,1,1,1,1,1,1,1],
    [1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1],
    [1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1],
    [1,1,1,0,1,1,1,1,1,1,1,1,0,1,0,1],
    [1,0,0,0,1,0,1,0,0,0,0,1,0,1,0,1],
    [1,0,1,1,1,0,1,0,1,1,0,1,0,1,0,1],
    [1,0,0,0,0,0,1,0,1,1,1,1,0,1,0,1],
    [1,1,1,1,1,1,1,0,0,0,0,0,0,1,0,1],
    [1,1,1,1,0,0,0,0,1,1,1,1,1,1,0,1],
    [1,1,1,1,0,1,1,1,1,1,1,1,1,1,0,1],
    [1,0,0,0,0,1,0,0,0,0,0,1,1,1,0,1],
    [1,0,1,1,1,1,1,1,1,1,0,1,1,1,0,1],
    [1,0,1,1,1,1,1,0,0,0,0,1,1,1,0,1],
    [1,0,1,1,1,1,1,0,1,1,1,1,1,1,0,1],
    [1,0,0,0,0,0,0,0,1,1,1,1,1,1,0,1],
    [1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1],
    [1,0,0,0,0,0,0,0,0,0,1,1,1,0,0,1],
    [1,0,1,1,1,1,1,1,1,0,1,1,0,0,1,1],
    [1,0,1,0,0,0,0,1,0,0,1,0,0,1,1,1],
    [1,0,1,0,1,1,1,0,0,1,0,0,1,1,1,1],
    [1,0,1,0,1,1,0,0,1,0,0,1,1,1,1,1],
    [1,0,1,0,1,0,0,1,0,0,1,1,1,1,1,1],
    [1,0,1,0,0,0,1,0,0,1,1,1,1,1,1,1],
    [1,0,1,1,1,1,0,0,1,1,1,1,1,1,1,1],
    [1,0,1,1,1,0,0,1,1,1,1,1,1,1,1,1],
    [1,0,1,1,0,0,1,1,1,1,1,1,1,1,1,1],
    [1,0,1,0,0,1,1,1,1,1,1,1,1,1,1,1],
    [1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1],
    [1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
    [1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1],
    [1,0,1,0,1,1,1,1,1,1,1,1,1,1,0,1],
    [1,0,1,0,1,3,0,0,0,0,0,0,0,1,0,1],
    [1,0,1,0,1,1,1,1,1,1,1,1,0,1,0,1],
    [1,0,1,0,1,0,0,0,0,0,0,0,0,1,0,1],
    [1,0,1,0,1,0,1,1,1,1,1,1,1,1,0,1],
    [1,0,1,0,1,0,0,0,0,0,0,0,0,1,0,1],
    [1,0,1,0,1,1,1,1,1,1,1,1,0,1,0,1],
    [1,0,1,0,1,0,0,0,0,0,0,0,0,1,0,1],
    [1,0,1,0,1,1,1,1,1,1,1,1,0,1,0,1],
    [1,0,1,0,1,0,0,0,0,0,0,0,0,1,0,1],
    [1,0,1,0,1,1,1,1,1,1,1,1,0,1,0,1],
    [1,0,1,0,1,0,0,0,0,0,0,0,0,1,0,1],
    [1,0,1,0,1,0,1,1,1,1,1,1,1,1,0,1],
    [1,0,1,0,1,0,0,0,0,0,0,0,0,1,0,1],
    [1,0,1,0,1,1,1,1,1,1,1,1,0,1,0,1],
    [1,0,1,0,0,0,0,0,0,0,0,0,0,1,0,1],
    [1,0,1,1,1,1,1,1,1,1,1,1,1,1,0,1],
    [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
    [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
]

def find_root_goal():
    x, y = -1, -1
    for row in  main_map:
        y = y + 1
        for point in row:
            x = x + 1
            if point == 2: root = (x,y)
            if point == 3: goal = (x,y)
        x = -1
    return root, goal
root, goal = find_root_goal()

def print_map(point):
    map_print = [
    [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
    [1,2,0,0,0,0,0,0,1,1,1,1,1,1,1,1],
    [1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1],
    [1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1],
    [1,1,1,0,1,1,1,1,1,1,1,1,0,1,0,1],
    [1,0,0,0,1,0,1,0,0,0,0,1,0,1,0,1],
    [1,0,1,1,1,0,1,0,1,1,0,1,0,1,0,1],
    [1,0,0,0,0,0,1,0,1,1,1,1,0,1,0,1],
    [1,1,1,1,1,1,1,0,0,0,0,0,0,1,0,1],
    [1,1,1,1,0,0,0,0,1,1,1,1,1,1,0,1],
    [1,1,1,1,0,1,1,1,1,1,1,1,1,1,0,1],
    [1,0,0,0,0,1,0,0,0,0,0,1,1,1,0,1],
    [1,0,1,1,1,1,1,1,1,1,0,1,1,1,0,1],
    [1,0,1,1,1,1,1,0,0,0,0,1,1,1,0,1],
    [1,0,1,1,1,1,1,0,1,1,1,1,1,1,0,1],
    [1,0,0,0,0,0,0,0,1,1,1,1,1,1,0,1],
    [1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1],
    [1,0,0,0,0,0,0,0,0,0,1,1,1,0,0,1],
    [1,0,1,1,1,1,1,1,1,0,1,1,0,0,1,1],
    [1,0,1,0,0,0,0,1,0,0,1,0,0,1,1,1],
    [1,0,1,0,1,1,1,0,0,1,0,0,1,1,1,1],
    [1,0,1,0,1,1,0,0,1,0,0,1,1,1,1,1],
    [1,0,1,0,1,0,0,1,0,0,1,1,1,1,1,1],
    [1,0,1,0,0,0,1,0,0,1,1,1,1,1,1,1],
    [1,0,1,1,1,1,0,0,1,1,1,1,1,1,1,1],
    [1,0,1,1,1,0,0,1,1,1,1,1,1,1,1,1],
    [1,0,1,1,0,0,1,1,1,1,1,1,1,1,1,1],
    [1,0,1,0,0,1,1,1,1,1,1,1,1,1,1,1],
    [1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1],
    [1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
    [1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1],
    [1,0,1,0,1,1,1,1,1,1,1,1,1,1,0,1],
    [1,0,1,0,1,3,0,0,0,0,0,0,0,1,0,1],
    [1,0,1,0,1,1,1,1,1,1,1,1,0,1,0,1],
    [1,0,1,0,1,0,0,0,0,0,0,0,0,1,0,1],
    [1,0,1,0,1,0,1,1,1,1,1,1,1,1,0,1],
    [1,0,1,0,1,0,0,0,0,0,0,0,0,1,0,1],
    [1,0,1,0,1,1,1,1,1,1,1,1,0,1,0,1],
    [1,0,1,0,1,0,0,0,0,0,0,0,0,1,0,1],
    [1,0,1,0,1,1,1,1,1,1,1,1,0,1,0,1],
    [1,0,1,0,1,0,0,0,0,0,0,0,0,1,0,1],
    [1,0,1,0,1,1,1,1,1,1,1,1,0,1,0,1],
    [1,0,1,0,1,0,0,0,0,0,0,0,0,1,0,1],
    [1,0,1,0,1,0,1,1,1,1,1,1,1,1,0,1],
    [1,0,1,0,1,0,0,0,0,0,0,0,0,1,0,1],
    [1,0,1,0,1,1,1,1,1,1,1,1,0,1,0,1],
    [1,0,1,0,0,0,0,0,0,0,0,0,0,1,0,1],
    [1,0,1,1,1,1,1,1,1,1,1,1,1,1,0,1],
    [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
    [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
]


    if point == "NONE":
        pass
    else:
        map_print[point[1]][point[0]] = 4
        
    for row in map_print:
        text = ""
        for x in row:
            if x == 0: text = text + "  "
            elif x == 1: text = text + "# "
            elif x == 2: text = text + "R "
            elif x == 3: text = text + "G "
            elif x == 4: text = text + "@ "
        print(text)

log_path = []
work_map = [
    [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
    [1,2,0,0,0,0,0,0,1,1,1,1,1,1,1,1],
    [1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1],
    [1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1],
    [1,1,1,0,1,1,1,1,1,1,1,1,0,1,0,1],
    [1,0,0,0,1,0,1,0,0,0,0,1,0,1,0,1],
    [1,0,1,1,1,0,1,0,1,1,0,1,0,1,0,1],
    [1,0,0,0,0,0,1,0,1,1,1,1,0,1,0,1],
    [1,1,1,1,1,1,1,0,0,0,0,0,0,1,0,1],
    [1,1,1,1,0,0,0,0,1,1,1,1,1,1,0,1],
    [1,1,1,1,0,1,1,1,1,1,1,1,1,1,0,1],
    [1,0,0,0,0,1,0,0,0,0,0,1,1,1,0,1],
    [1,0,1,1,1,1,1,1,1,1,0,1,1,1,0,1],
    [1,0,1,1,1,1,1,0,0,0,0,1,1,1,0,1],
    [1,0,1,1,1,1,1,0,1,1,1,1,1,1,0,1],
    [1,0,0,0,0,0,0,0,1,1,1,1,1,1,0,1],
    [1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1],
    [1,0,0,0,0,0,0,0,0,0,1,1,1,0,0,1],
    [1,0,1,1,1,1,1,1,1,0,1,1,0,0,1,1],
    [1,0,1,0,0,0,0,1,0,0,1,0,0,1,1,1],
    [1,0,1,0,1,1,1,0,0,1,0,0,1,1,1,1],
    [1,0,1,0,1,1,0,0,1,0,0,1,1,1,1,1],
    [1,0,1,0,1,0,0,1,0,0,1,1,1,1,1,1],
    [1,0,1,0,0,0,1,0,0,1,1,1,1,1,1,1],
    [1,0,1,1,1,1,0,0,1,1,1,1,1,1,1,1],
    [1,0,1,1,1,0,0,1,1,1,1,1,1,1,1,1],
    [1,0,1,1,0,0,1,1,1,1,1,1,1,1,1,1],
    [1,0,1,0,0,1,1,1,1,1,1,1,1,1,1,1],
    [1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1],
    [1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
    [1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1],
    [1,0,1,0,1,1,1,1,1,1,1,1,1,1,0,1],
    [1,0,1,0,1,3,0,0,0,0,0,0,0,1,0,1],
    [1,0,1,0,1,1,1,1,1,1,1,1,0,1,0,1],
    [1,0,1,0,1,0,0,0,0,0,0,0,0,1,0,1],
    [1,0,1,0,1,0,1,1,1,1,1,1,1,1,0,1],
    [1,0,1,0,1,0,0,0,0,0,0,0,0,1,0,1],
    [1,0,1,0,1,1,1,1,1,1,1,1,0,1,0,1],
    [1,0,1,0,1,0,0,0,0,0,0,0,0,1,0,1],
    [1,0,1,0,1,1,1,1,1,1,1,1,0,1,0,1],
    [1,0,1,0,1,0,0,0,0,0,0,0,0,1,0,1],
    [1,0,1,0,1,1,1,1,1,1,1,1,0,1,0,1],
    [1,0,1,0,1,0,0,0,0,0,0,0,0,1,0,1],
    [1,0,1,0,1,0,1,1,1,1,1,1,1,1,0,1],
    [1,0,1,0,1,0,0,0,0,0,0,0,0,1,0,1],
    [1,0,1,0,1,1,1,1,1,1,1,1,0,1,0,1],
    [1,0,1,0,0,0,0,0,0,0,0,0,0,1,0,1],
    [1,0,1,1,1,1,1,1,1,1,1,1,1,1,0,1],
    [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
    [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
]


def find_path(point):
    x, y = point
    if math.dist(point,goal) == 0: pass
    else:
        log_path.append(point)
        children = [] #(x,y)
        if work_map[y+1][x] != 1: children.append((x,y+1))
        if work_map[y-1][x] != 1: children.append((x,y-1))
        if work_map[y][x+1] != 1: children.append((x+1,y))
        if work_map[y][x-1] != 1: children.append((x-1,y))
        arrange_child = []
        log_distance = float('inf')
        for x in children:
            if math.dist(x,goal) <= log_distance: 
                arrange_child.insert(0,x)
                log_distance = math.dist(x,goal)
            else: arrange_child.append(x)
        result = "none"
        for x in arrange_child:
            if x not in log_path: 
                result = x
                break
        if result == "none": 
            result = arrange_child[0]
            log_path.append(point)
            work_map[point[1]][point[0]] = 1

        find_path(result)
    return log_path


if __name__ == "__main__":
    find_path(root)
    print(log_path)
    for x in log_path:
        os.system('cls')
        print_map(x)
        time.sleep(0.005)